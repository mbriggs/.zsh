{"name":".zsh","google":"","tagline":"my zsh config,  mostly stolen from others","body":"# ZSH Config\r\n\r\nThis is my zsh config, which was mostly created by reading others on\r\nthe web, and stealing ideas.\r\n\r\nIf you live in your prompt all day for your job, then using a\r\n\"framework\" like oh-my-zsh is only going to hurt you in the long run\r\n(like janus for vim, or emacs-starter-kit for emacs). Instead of\r\nlooking at this like a \"framework\", treat it as either inspiration for\r\nsomething totally yours, or a starting point that you extend and\r\nmodify to suit your personal preferences\r\n\r\n## Gotchas\r\n\r\nI'll try to address this at some point, but I have a seprate repo for my dotfiles, and there are some parts of this that will source those files. So before an install, have dot files that look something like https://github.com/mbriggs/dotfiles/blob/master/scmbrc https://github.com/mbriggs/dotfiles/blob/master/git.scmbrc and https://github.com/mbriggs/dotfiles/blob/master/aliases (to be clear, that means something like git.scmbrc should be in your home dir with a dot in front of it, `.git.scmbrc`)\r\n\r\n## Installation\r\n\r\n```\r\ncd ~\r\ngit clone https://github.com/mbriggs/.zsh\r\ncd .zsh\r\nmake install\r\n```\r\n\r\n## Highlights\r\n\r\nThis has a lot of common configurations and customizations. What is\r\nnot so common is that it is also split apart into very easy to manage\r\nfiles, and has a one command install `make install`.\r\n\r\nBeyond that, here are some highlights that aren't quite as common.\r\n\r\n- [auto-fu](https://github.com/hchbaw/auto-fu.zsh) is an amazing\r\n  plugin that provides fast completion as you type. The only downside\r\n  is that it is a pain to set up, but once it is, this plugin probably\r\n  will have the greatest impact on your day to day usage.\r\n\r\n- [scm breeze](https://github.com/ndbroadbent/scm_breeze) is another\r\n  amazing plugin that makes git a lot less painful to use from the\r\n  command line, especially if you are on a project where people love\r\n  to use super long branch names with silly word separaters (like\r\n  `_`), AND there are several hundred branches in the repo.\r\n\r\n- [Pure](https://github.com/sindresorhus/pure) prompt (by\r\n  cindersaurus) is beautiful, minimal, and very fast (uses the fastest\r\n  method of git dirty checking possible)\r\n\r\n- Ruby has a packaging system called Bundler, which requires you to\r\n  prepend certain commands with `bundle exec`. This gets old very\r\n  fast, and there are various solutions available out there. This\r\n  solution has a whitelist of commands that will be automatically\r\n  `bundle exec`d, but only if you are in a project that uses bundler\r\n\r\n- `B` refers to the current branch in git. So if you are on a branch\r\n  called `this-is-some-really-really-long-branch-name`, then `git push\r\n  origin B` is extremely helpful.","note":"Don't delete this file! It's used internally to help with page regeneration."}